@page "/Moras"
@using PrestamosApp.Models;
@using PrestamosApp.BLL;

@inject IToastService toast

<EditForm Model="mora" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">

        <div class="card-header">
            <h3>Registro de Moras</h3>
        </div>

        <div class="card-body">
            <label for="Id">ID:</label>
            <div class="input-group">
                <InputNumber @bind-Value="mora.ID" class="form-control"></InputNumber>
                <ValidationMessage For="(() => mora.ID)"></ValidationMessage>
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                </div>
            </div>

            <div class="form-group">
                <label for="FECHA">FECHA:</label>
                <InputDate @bind-Value="mora.Fecha" class="form-control"></InputDate>
                <ValidationMessage For="(() => mora.Fecha)"></ValidationMessage>
            </div>

            <div class="input-group">
                
                <div class="form-group mr-3">
                    <label for="PrestamoID" class="mr-3">Prestamo ID:</label>
                    <select class="form-control" @bind="@prestamoiD" @onclick="CargarPrestamos">
                        <option value="" disabled selected>Seleccione un Prestamo</option>
                        @foreach (var item in CargarComboPrestamos())
                        {
                            <option value="@item.ID">@item.ID</option>
                        }
                    </select>
                </div>

                <div class="form-group mr-3">
                    <label for="Valor" class="mr-3">Valor</label>
                    <InputNumber @bind-Value="@valor" class="form-control" step="00.2"></InputNumber>
                </div>

                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" @onclick="Agregar"><span class="icon-add"></span>Agregar</button>
                </div>
            </div><br />

            <div>
                <table class="table table-striped">
                    <thead class="thead-light">
                        <tr>
                            <th>ID</th>
                            <th>PrestamoID</th>
                            <th>Valor</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in mora.MorasDetalle)
                        {
                            <tr>
                                <th>@item.ID</th>
                                <th>@item.PrestamoID</th>
                                <th>@item.Valor</th>
                                <th><button type="button" class="btn btn-outline-danger btn-sm" @onclick="(()=> EliminarProducto(item))">Eliminar</button></th>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>

            <div class="form-group">
                <label for="Total">Total</label>
                <InputNumber @bind-Value="mora.Total" class="form-control" step="00.2"></InputNumber>
                <ValidationMessage For="(() => mora.Total)"></ValidationMessage>
            </div>

            <div class="form-group">
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success" @onclick="Guardar"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    Moras mora = new Moras();
    Prestamos prestamo = new Prestamos();

    //variables del detalle
    public int prestamoiD { get; set; }
    public decimal valor { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        CargarComboPrestamos();
    }

    private void Buscar()
    {
        if (mora.ID > 0)
        {
            var Encontrado = MorasBLL.Buscar(mora.ID);

            if (Encontrado != null)
            {
                this.mora = Encontrado;
            }
        }
    }

    private List<Prestamos> CargarComboPrestamos()
    {
        List<Prestamos> lista = new List<Prestamos>();

        try
        {
            lista = PrestamosBLL.GetList(p => true);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.ToString(), "Error");
        }

        return lista;
    }

    private void CargarPrestamos()
    {
        if (prestamo.ID > 0)
        {
            try
            {
                prestamo = PrestamosBLL.Buscar(Convert.ToInt32(prestamo.ID));
            }
            catch (Exception ex)
            {
                toast.ShowError(ex.ToString(), "Error");
            }
        }
    }

    private void Agregar()
    {
        this.mora.MorasDetalle.Add(new MorasDetalle
        {
            ID = 0,
            MoraID = mora.ID,
            PrestamoID = prestamoiD,
            Valor = valor
        });

        CalcularTotal();
    }

    private void CalcularTotal()
    {
        decimal total = 0;
        foreach (var item in mora.MorasDetalle)
        {
            total += item.Valor;
        }
        mora.Total = total;
    }

    private void EliminarProducto(MorasDetalle detalle)
    {
        mora.MorasDetalle.Remove(detalle);
    }

    private void Nuevo()
    {
        mora = new Moras();
    }

    private void Guardar()
    {
        bool guardado = MorasBLL.Guardar(mora);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Guardada correctamente", "Exito");
        }
        else
        {
            toast.ShowError("No se pudo guardar");
        }

    }

    private void Eliminar()
    {
        bool eliminado = MorasBLL.Eliminar(mora.ID);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Eliminada correctamente");
        }
        else
        {
            toast.ShowError("No se pudo eliminar");
        }

    }
}
